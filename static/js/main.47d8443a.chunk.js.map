{"version":3,"sources":["logo.svg","containers/DatePicker.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","DatePicker","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleDayChange","bind","assertThisInitialized","state","selectedDay","undefined","day","setState","startDate","moment","diff","diffDuration","duration","year","years","month","months","days","hours","minutes","seconds","react_default","a","createElement","toLocaleDateString","className","DayPickerInput_default","onDayChange","class","target","href","React","Component","App","src","logo","alt","src_containers_DatePicker","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+SCkEzBC,qBA1Db,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,gBAAkBP,EAAKO,gBAAgBC,KAArBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACvBA,EAAKU,MAAQ,CACXC,iBAAaC,GAJEZ,+EAOHa,GACdV,KAAKW,SAAS,CAAEH,YAAaE,qCAGtB,IACCF,EAAgBR,KAAKO,MAArBC,YACFI,EAAYC,IAAOb,KAAKO,MAAMC,aAE9BM,EADSD,MACMC,KAAKF,GACpBG,EAAeF,IAAOG,SAASF,GAO/BG,EAAMF,EAAaG,QACnBC,EAAOJ,EAAaK,SACpBC,EAAON,EAAaM,OACpBC,EAAQP,EAAaO,QACrBC,EAAUR,EAAaQ,UACvBC,EAAUT,EAAaS,UAC7B,OACEC,EAAAC,EAAAC,cAAA,WAEGnB,GAAeiB,EAAAC,EAAAC,cAAA,iBAASnB,EAAYoB,uBACnCpB,GAAeiB,EAAAC,EAAAC,cAAA,0BACjBF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UAEfJ,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAgBK,YAAa/B,KAAKI,mBAGlCqB,EAAAC,EAAAC,cAAA,MAAIE,UAAU,UAAd,2CACAJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,UAAd,gBAAoCJ,EAAAC,EAAAC,cAAA,WAApC,KAAgDV,EAAhD,SAA2DQ,EAAAC,EAAAC,cAAA,WAA3D,IAAsER,EAAtE,YAAqFM,EAAAC,EAAAC,cAAA,WAArF,KAAiGN,EAAjG,UAA6GI,EAAAC,EAAAC,cAAA,WAA7G,KAAyHL,EAAzH,WAAuIG,EAAAC,EAAAC,cAAA,WAAvI,KAAmJJ,EAAnJ,aAAqKE,EAAAC,EAAAC,cAAA,WAArK,KAAiLH,EAAjL,aAELC,EAAAC,EAAAC,cAAA,OAAKK,MAAM,iBACVP,EAAAC,EAAAC,cAAA,OAAKK,MAAM,aACPP,EAAAC,EAAAC,cAAA,OAAKK,MAAM,OACPP,EAAAC,EAAAC,cAAA,OAAKK,MAAM,cACPP,EAAAC,EAAAC,cAAA,yBACiBF,EAAAC,EAAAC,cAAA,KAAGM,OAAO,SAASC,KAAK,mCAAxB,wBAjDPC,IAAMC,6BCYjBC,mLAZX,OAEEZ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,OAAKK,MAAM,UACbP,EAAAC,EAAAC,cAAA,OAAKW,IAAKC,IAAMV,UAAU,WAAWW,IAAI,UAEtCf,EAAAC,EAAAC,cAACc,EAAD,cARSL,aCQEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.47d8443a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.9d18eefc.svg\";","import React from 'react';\nimport moment from 'moment';\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\n// import 'react-day-picker/lib/style.css';\nimport './DatePicker.css';\n\n class DatePicker extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.handleDayChange = this.handleDayChange.bind(this);\n    this.state = {\n      selectedDay: undefined,\n    };\n  }\n  handleDayChange(day) {\n    this.setState({ selectedDay: day });\n    // console.log(day.getTime());\n  }\n  render() {\n    const { selectedDay } = this.state;\n    const startDate = moment(this.state.selectedDay);\n    const timeEnd =moment();\n    const diff = timeEnd.diff(startDate);\n    const diffDuration = moment.duration(diff);\n    // console.log(\"Total Duration in millis:\", diffDuration.asMilliseconds());\n    // console.log(\"Years:\", diffDuration.years());\n    // console.log(\"Days:\", diffDuration.days());\n    // console.log(\"Hours:\", diffDuration.hours());\n    // console.log(\"Minutes:\", diffDuration.minutes());\n    // console.log(\"Seconds:\", diffDuration.seconds());\n    const year =diffDuration.years();\n    const month =diffDuration.months();\n    const days = diffDuration.days();\n    const hours = diffDuration.hours();\n    const minutes = diffDuration.minutes();\n    const seconds = diffDuration.seconds();\n    return (\n      <div>\n\n        {selectedDay && <p>Day: {selectedDay.toLocaleDateString()}</p>}\n        {!selectedDay && <h3>Choose a day</h3>}\n        <div className=\"Result\">\n\n        <DayPickerInput onDayChange={this.handleDayChange} />\n        </div>\n        \n        <h3 className=\"Result\">Type your birthday in YYYY-MM-DD format</h3>\n        <h1 className=\"Result\">Your Age is  <br></br>  {year} years<br></br> {month} months  <br></br>  {days} days  <br></br>  {hours} hours  <br></br>  {minutes} minutes  <br></br>  {seconds} seconds </h1>\n\n   <div class=\"footer Result\">\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"col-md-12 \">\n                <p>\n                    Developed by <a target=\"_blank\" href=\"https://monsing-se.netlify.app/\">MONSING</a>\n                </p>\n                \n            </div>\n        </div>\n    </div>\n</div>\n      </div>\n    );\n  }\n}\nexport default DatePicker;","import React, { Component } from 'react';\nimport './App.css';\nimport DatePicker from './containers/DatePicker';\nimport logo from './logo.svg';\nclass App extends Component {\n  render() {\n    return (\n    \n      <div className=\"App\">\n        <div class=\"center\">\n      <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n    </div>\n         <DatePicker />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}