{"version":3,"sources":["containers/DatePicker.js","App.js","serviceWorker.js","index.js"],"names":["DatePicker","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleDayChange","bind","assertThisInitialized","state","selectedDay","undefined","day","setState","startDate","moment","diff","diffDuration","duration","year","years","month","months","days","hours","minutes","seconds","react_default","a","createElement","toLocaleDateString","className","DayPickerInput_default","onDayChange","class","target","href","React","Component","App","src_containers_DatePicker","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sUAqEeA,qBA9Db,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,gBAAkBP,EAAKO,gBAAgBC,KAArBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACvBA,EAAKU,MAAQ,CACXC,iBAAaC,GAJEZ,+EAOHa,GACdV,KAAKW,SAAS,CAAEH,YAAaE,qCAGtB,IACCF,EAAgBR,KAAKO,MAArBC,YACFI,EAAYC,IAAOb,KAAKO,MAAMC,aAE9BM,EADUD,MACKC,KAAKF,GACpBG,EAAeF,IAAOG,SAASF,GAO/BG,EAAOF,EAAaG,QACpBC,EAAQJ,EAAaK,SACrBC,EAAON,EAAaM,OACpBC,EAAQP,EAAaO,QACrBC,EAAUR,EAAaQ,UACvBC,EAAUT,EAAaS,UAC7B,OACEC,EAAAC,EAAAC,cAAA,WACGnB,GAAeiB,EAAAC,EAAAC,cAAA,iBAASnB,EAAYoB,uBACnCpB,GAAeiB,EAAAC,EAAAC,cAAA,0BACjBF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACbJ,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAgBK,YAAa/B,KAAKI,mBAGpCqB,EAAAC,EAAAC,cAAA,MAAIE,UAAU,UAAd,2CACAJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,UAAd,eACcJ,EAAAC,EAAAC,cAAA,WADd,IACyBV,EADzB,SACoCQ,EAAAC,EAAAC,cAAA,WADpC,IAC+CR,EAD/C,WAC6DM,EAAAC,EAAAC,cAAA,WAAU,IACpEN,EAFH,SAEcI,EAAAC,EAAAC,cAAA,WAFd,IAEyBL,EAFzB,UAEsCG,EAAAC,EAAAC,cAAA,WAFtC,IAEiDJ,EAFjD,WAEkE,IAChEE,EAAAC,EAAAC,cAAA,WAHF,IAGaH,EAHb,WAG8B,KAG9BC,EAAAC,EAAAC,cAAA,OAAKK,MAAM,iBACTP,EAAAC,EAAAC,cAAA,OAAKK,MAAM,aACTP,EAAAC,EAAAC,cAAA,OAAKK,MAAM,OACTP,EAAAC,EAAAC,cAAA,OAAKK,MAAM,cACTP,EAAAC,EAAAC,cAAA,wBACe,IACbF,EAAAC,EAAAC,cAAA,KAAGM,OAAO,SAASC,KAAK,mCAAxB,wBAnDOC,IAAMC,YCOhBC,mLARX,OACEZ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACW,EAAD,cAJUF,aCSEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.02ea654d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport moment from \"moment\";\r\nimport DayPickerInput from \"react-day-picker/DayPickerInput\";\r\n\r\nimport \"./DatePicker.css\";\r\n\r\nclass DatePicker extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleDayChange = this.handleDayChange.bind(this);\r\n    this.state = {\r\n      selectedDay: undefined,\r\n    };\r\n  }\r\n  handleDayChange(day) {\r\n    this.setState({ selectedDay: day });\r\n    // console.log(day.getTime());\r\n  }\r\n  render() {\r\n    const { selectedDay } = this.state;\r\n    const startDate = moment(this.state.selectedDay);\r\n    const timeEnd = moment();\r\n    const diff = timeEnd.diff(startDate);\r\n    const diffDuration = moment.duration(diff);\r\n    // console.log(\"Total Duration in millis:\", diffDuration.asMilliseconds());\r\n    // console.log(\"Years:\", diffDuration.years());\r\n    // console.log(\"Days:\", diffDuration.days());\r\n    // console.log(\"Hours:\", diffDuration.hours());\r\n    // console.log(\"Minutes:\", diffDuration.minutes());\r\n    // console.log(\"Seconds:\", diffDuration.seconds());\r\n    const year = diffDuration.years();\r\n    const month = diffDuration.months();\r\n    const days = diffDuration.days();\r\n    const hours = diffDuration.hours();\r\n    const minutes = diffDuration.minutes();\r\n    const seconds = diffDuration.seconds();\r\n    return (\r\n      <div>\r\n        {selectedDay && <p>Day: {selectedDay.toLocaleDateString()}</p>}\r\n        {!selectedDay && <h3>Choose a day</h3>}\r\n        <div className=\"Result\">\r\n          <DayPickerInput onDayChange={this.handleDayChange} />\r\n        </div>\r\n\r\n        <h3 className=\"Result\">Type your birthday in YYYY-MM-DD format</h3>\r\n        <h1 className=\"Result\">\r\n          Your Age is <br></br> {year} years<br></br> {month} months <br></br>{\" \"}\r\n          {days} days <br></br> {hours} hours <br></br> {minutes} minutes{\" \"}\r\n          <br></br> {seconds} seconds{\" \"}\r\n        </h1>\r\n\r\n        <div class=\"footer Result\">\r\n          <div class=\"container\">\r\n            <div class=\"row\">\r\n              <div class=\"col-md-12 \">\r\n                <p>\r\n                  Developed by{\" \"}\r\n                  <a target=\"_blank\" href=\"https://monsing-se.netlify.app/\">\r\n                    MONSING\r\n                  </a>\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default DatePicker;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport DatePicker from \"./containers/DatePicker\";\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <DatePicker />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}